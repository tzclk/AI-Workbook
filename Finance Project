Get the Data

In this section we will learn how to use pandas to directly read data from Google finance using pandas!

First we need to start with the proper imports, which we've already laid out for you here.

*Note: [You'll need to install pandas-datareader for this to work!](https://github.com/pydata/pandas-datareader) Pandas datareader allows you to [read stock information directly from the internet](http://pandas.pydata.org/pandas-docs/stable/remote_data.html) Use these links for install guidance (**pip install pandas-datareader**), or just follow along with the video lecture.*

### The Imports

Already filled out for you.



from pandas_datareader import data, wb
import pandas as pd
import numpy as np
import datetime
%matplotlib inline


Data
We need to get data using pandas datareader. We will get stock information for the following banks:

Bank of America
CitiGroup
Goldman Sachs
JPMorgan Chase
Morgan Stanley
Wells Fargo
** Figure out how to get the stock data from Jan 1st 2006 to Jan 1st 2016 for each of these banks. Set each bank to be a separate dataframe, with the variable name for that bank being its ticker symbol. This will involve a few steps:**

Use datetime to set start and end datetime objects.
Figure out the ticker symbol for each bank.
Figure out how to use datareader to grab info on the stock.
** Use this documentation page for hints and instructions (it should just be a matter of replacing certain values. Use google finance as a source, for example:**

# Bank of America
BAC = data.DataReader("BAC", 'google', start, end)
WARNING: MAKE SURE TO CHECK THE LINK ABOVE FOR THE LATEST WORKING API. "google" MAY NOT ALWAYS WORK.


start = datetime.datetime(2006, 1, 1)
end = datetime.datetime(2016, 1, 1)


# Bank of America
BAC = data.DataReader("BAC", 'google', start, end)

# CitiGroup
C = data.DataReader("C", 'google', start, end)

# Goldman Sachs
GS = data.DataReader("GS", 'google', start, end)

# JPMorgan Chase
JPM = data.DataReader("JPM", 'google', start, end)

# Morgan Stanley
MS = data.DataReader("MS", 'google', start, end)

# Wells Fargo
WFC = data.DataReader("WFC", 'google', start, end)



# Could also do this for a Panel Object
df = data.DataReader(['BAC', 'C', 'GS', 'JPM', 'MS', 'WFC'],'google', start, end)

* Create a list of the ticker symbols (as strings) in alphabetical order. Call this list: tickers**
tickers = ['BAC', 'C', 'GS', 'JPM', 'MS', 'WFC']


** Use pd.concat to concatenate the bank dataframes together to a single data frame called bank_stocks. 
Set the keys argument equal to the tickers list. Also pay attention to what axis you concatenate on.**



bank_stocks = pd.concat([BAC, C, GS, JPM, MS, WFC],axis=1,keys=tickers)


** Use pd.concat to concatenate the bank dataframes together to a single data frame called bank_stocks. 
Set the keys argument equal to the tickers list. Also pay attention to what axis you concatenate on.**


bank_stocks = pd.concat([BAC, C, GS, JPM, MS, WFC],axis=1,keys=tickers)


** Set the column name levels (this is filled out for you):**

bank_stocks.columns.names = ['Bank Ticker','Stock Info']

bank_stocks.head()



EDA
Let's explore the data a bit! Before continuing, I encourage you to check out the documentation 
on Multi-Level Indexing and Using .xs. Reference the solutions if you can not figure out 
how to use .xs(), since that will be a major part of this project.

** What is the max Close price for each bank's stock throughout the time period?**



bank_stocks.xs(key='Close',axis=1,level='Stock Info').max()


returns = pd.DataFrame()



** We can use pandas pct_change() method on the Close column to create a column representing this return value. 
Create a for loop that goes and for each Bank Stock Ticker creates this returns column and set's it as a column 
in the returns DataFrame.**



for tick in tickers:
    returns[tick+' Return'] = bank_stocks[tick]['Close'].pct_change()
returns.head()




* Create a pairplot using seaborn of the returns dataframe. What stock stands out to you? Can you figure out why?**

#returns[1:]
import seaborn as sns
sns.pairplot(returns[1:])


# Worst Drop (4 of them on Inauguration day)
returns.idxmin()


** You should have noticed that Citigroup's largest drop and biggest gain were very close to one another, 
did anythign significant happen in that time frame? **



# Best Single Day Gain
# citigroup stock split in May 2011, but also JPM day after inauguration.
returns.idxmax()



** Take a look at the standard deviation of the returns, which stock would you classify as 
the riskiest over the entire time period? Which would you classify as the riskiest for the year 2015?**


returns.std()

returns.ix['2015-01-01':'2015-12-31'].std()


** Create a distplot using seaborn of the 2015 returns for Morgan Stanley **



sns.distplot(returns.ix['2015-01-01':'2015-12-31']['MS Return'],color='green',bins=100)


** Create a distplot using seaborn of the 2008 returns for CitiGroup **

sns.distplot(returns.ix['2008-01-01':'2008-12-31']['C Return'],color='red',bins=100)






#More Visualization

import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('whitegrid')
%matplotlib inline

# Optional Plotly Method Imports
import plotly
import cufflinks as cf
cf.go_offline()

** Create a line plot showing Close price for each bank for the entire index of time. 
(Hint: Try using a for loop, or use .xs to get a cross section of the data.)**


for tick in tickers:
    bank_stocks[tick]['Close'].plot(figsize=(12,4),label=tick)
plt.legend()




bank_stocks.xs(key='Close',axis=1,level='Stock Info').plot()

# plotly
bank_stocks.xs(key='Close',axis=1,level='Stock Info').iplot()







#Moving Averages

Let's analyze the moving averages for these stocks in the year 2008.

** Plot the rolling 30 day average against the Close Price for Bank Of America's stock for the year 2008**

plt.figure(figsize=(12,6))
BAC['Close'].ix['2008-01-01':'2009-01-01'].rolling(window=30).mean().plot(label='30 Day Avg')
BAC['Close'].ix['2008-01-01':'2009-01-01'].plot(label='BAC CLOSE')
plt.legend()




** Create a heatmap of the correlation between the stocks Close Price.**


sns.heatmap(bank_stocks.xs(key='Close',axis=1,level='Stock Info').corr(),annot=True)




** Optional: Use seaborn's clustermap to cluster the correlations together:**

sns.clustermap(bank_stocks.xs(key='Close',axis=1,level='Stock Info').corr(),annot=True)




close_corr = bank_stocks.xs(key='Close',axis=1,level='Stock Info').corr()
close_corr.iplot(kind='heatmap',colorscale='rdylbu')




Part 2 (Optional)
In this second part of the project we will rely on the cufflinks library 
to create some Technical Analysis plots. This part of the project is experimental 
due to its heavy reliance on the cuffinks project, so feel free to skip it if any functionality is broken in the future.

** Use .iplot(kind='candle) to create a candle plot of Bank of America's stock from Jan 1st 2015 to Jan 1st 2016.**

BAC[['Open', 'High', 'Low', 'Close']].ix['2015-01-01':'2016-01-01'].iplot(kind='candle')



** Use .ta_plot(study='sma') to create a Simple Moving Averages plot of Morgan Stanley for the year 2015.**

MS['Close'].ix['2015-01-01':'2016-01-01'].ta_plot(study='sma',periods=[13,21,55],title='Simple Moving Averages')



** Use .ta_plot(study='boll') to create a Bollinger Band Plot for Bank of America for the year 2015.
BAC['Close'].ix['2015-01-01':'2016-01-01'].ta_plot(study='boll')



















































