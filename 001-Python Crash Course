 
Python Crash Course
Please note, this is not meant to be a comprehensive overview of Python or programming in general, if you have no programming experience, you should probably take my other course: Complete Python Bootcamp instead.

This notebook is just a code reference for the videos, no written explanations here

This notebook will just go through the basic topics in order:

Data types
Numbers
Strings
Printing
Lists
Dictionaries
Booleans
Tuples
Sets


Comparison Operators
if, elif, else Statements
for Loops
while Loops
range()
list comprehension
functions
lambda expressions
map and filter
methods


Data types
Numbers
1 + 1
2
1 * 3
3
1 / 2
0.5
2 ** 4
16
4 % 2
0
5 % 2
1
(2 + 3) * (5 + 5)
50



Variable Assignment
# Can not start with number or special characters
name_of_var = 2
x = 2
y = 3
z = x + y
z
5



Strings
'single quotes'
'single quotes'
"double quotes"
'double quotes'
" wrap lot's of other quotes"
" wrap lot's of other quotes"


Printing
x = 'hello'
x
'hello'
print(x)
hello
num = 12
name = 'Sam'
print('My number is: {one}, and my name is: {two}'.format(one=num,two=name))
My number is: 12, and my name is: Sam
print('My number is: {}, and my name is: {}'.format(num,name))
My number is: 12, and my name is: Sam



Lists
[1,2,3]
[1, 2, 3]
['hi',1,[1,2]]
['hi', 1, [1, 2]]
my_list = ['a','b','c']
my_list.append('d')
my_list
['a', 'b', 'c', 'd']
my_list[0]
'a'
my_list[1]
'b'
my_list[1:]
['b', 'c', 'd']
my_list[:1]
['a']
my_list[0] = 'NEW'
my_list
['NEW', 'b', 'c', 'd']
nest = [1,2,3,[4,5,['target']]]
nest[3]
[4, 5, ['target']]
nest[3][2]
['target']
nest[3][2][0]
'target'



Dictionaries
d = {'key1':'item1','key2':'item2'}
d
{'key1': 'item1', 'key2': 'item2'}
d['key1']
'item1'


Booleans
True
True
False
False
Tuples
t = (1,2,3)
t[0]
1
t[0] = 'NEW'
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-44-97e4e33b36c2> in <module>()
----> 1 t[0] = 'NEW'

TypeError: 'tuple' object does not support item assignment




Sets
{1,2,3}
{1, 2, 3}
{1,2,3,1,2,1,2,3,3,3,3,2,2,2,1,1,2}
{1, 2, 3}



Comparison Operators
1 > 2
False
1 < 2
True
1 >= 1
True
1 <= 4
True
1 == 1
True
'hi' == 'bye'
False



Logic Operators
(1 > 2) and (2 < 3)
False
(1 > 2) or (2 < 3)
True
(1 == 2) or (2 == 3) or (4 == 4)
True
if,elif, else Statements
if 1 < 2:
    print('Yep!')
Yep!
if 1 < 2:
    print('yep!')
yep!
if 1 < 2:
    print('first')
else:
    print('last')
first
if 1 > 2:
    print('first')
else:
    print('last')
last
if 1 == 2:
    print('first')
elif 3 == 3:
    print('middle')
else:
    print('Last')
middle
for Loops
seq = [1,2,3,4,5]
for item in seq:
    print(item)
1
2
3
4
5
for item in seq:
    print('Yep')
Yep
Yep
Yep
Yep
Yep
for jelly in seq:
    print(jelly+jelly)
2
4
6
8
10


while Loops
i = 1
while i < 5:
    print('i is: {}'.format(i))
    i = i+1
i is: 1
i is: 2
i is: 3
i is: 4
range()
range(5)
range(0, 5)
for i in range(5):
    print(i)
0
1
2
3
4
list(range(5))
[0, 1, 2, 3, 4]



list comprehension
x = [1,2,3,4]
out = []
for item in x:
    out.append(item**2)
print(out)
[1, 4, 9, 16]
[item**2 for item in x]
[1, 4, 9, 16]



functions
def my_func(param1='default'):
    """
    Docstring goes here.
    """
    print(param1)
    
    
    
my_func
<function __main__.my_func>
my_func()
default
my_func('new param')
new param
my_func(param1='new param')
new param
def square(x):
    return x**2
out = square(2)
print(out)
4



lambda expressions
def times2(var):
    return var*2
times2(2)
4
lambda var: var*2
<function __main__.<lambda>>


map and filter
seq = [1,2,3,4,5]
map(times2,seq)
<map at 0x105316748>
list(map(times2,seq))
[2, 4, 6, 8, 10]
list(map(lambda var: var*2,seq))
[2, 4, 6, 8, 10]
filter(lambda item: item%2 == 0,seq)
<filter at 0x105316ac8>
list(filter(lambda item: item%2 == 0,seq))
[2, 4]



methods
st = 'hello my name is Sam'
st.lower()
'hello my name is sam'
st.upper()
'HELLO MY NAME IS SAM'
st.split()
['hello', 'my', 'name', 'is', 'Sam']
tweet = 'Go Sports! #Sports'
tweet.split('#')
['Go Sports! ', 'Sports']
tweet.split('#')[1]
'Sports'
d
{'key1': 'item1', 'key2': 'item2'}
d.keys()
dict_keys(['key2', 'key1'])
d.items()
dict_items([('key2', 'item2'), ('key1', 'item1')])
lst = [1,2,3]
lst.pop()
3
lst
[1, 2]
'x' in [1,2,3]
False
'x' in ['x','y','z']
True
Great Job!
